Testing repo...

Pathway to app startup:
main.ts --> app.module.ts --> app.component.ts --> index.html --> app.component.html
**index.html is the page that is getting served up in the browser when we visit the appropriate localhost page**


Angular is a JS framework, changing the DOM (HTML) at runtime
Angular is for Single Page Applications

Angular = Components!!
======================
app component = root component
each component has its own business logic
components are reusable
each component will typically have its own folder within the project structure
component = a typescript class, instantiated by angular
components can be created "by hand", or also by using the CLI
components can be nested inside one another
a component HAS to have a template(for inline) or templateUrl(for pointing to external file)
component selector must be unique!!


Databinding
==============
communication between the typescript code(business logic) and the template(html)
4 Types:
-string interpolation {{data}}
---->whatever is put inside the double braces must ultimately resolve to a string!
---->no multi-line or block expressions
-property binding [property] = "data"
-event binding (event) = "expression"
-two-way-binding [(ngModel)] = "data"
can output data, and react to user events

use $event to fetch the event data


Directives
============
directives = instructions in the dom!
kind of like components without a template
typically added with an attribute selector
ngIf directive requires * (looks like *ngIf)
ngIf = structural directive --> alters the DOM structure, adds or removes elements
attribute directives --> only change the element they are placed on, they don't add or remove elements
*ngFor = structural directive
ngClass = attribute directive

Error Messages, Debugging
===============
Sourcemaps allow the browser to "back-translate" from js to ts


NgFor
========
ng-for loop

The ng-for loop is a structural directive. We will see how to change the structure of the dom.

Point is to repeat given HTML ones for each value in an array[]. Context is each time passing the array value for string interpolation or binding.

The syntax is *for =” let <value> of collection.”

<value> is a variable name, <collection.> is a property on your component which holds a collection, usually an array but anything that can be iterated.

Ng-For - local variable
Index - used to provide the index for the current element while iteration.
First - return true if the current element is the last in the iteration otherwise it is false.
Even - return true if current elements are even elements based on the index in the iteration otherwise false.
It is used to execute the block of code to a specific item number. A for loop is contains the initialization, condition, and increment/ decrement in a single line, which provides easy debug, and structure of looping.
The for loop is used to control the repeated statements.
A for loop is worked till the condition is (found)/matches successfully.
A for-loop id is used to repeat a portion of part of the HTML template once per item from an iterable list.
Example

First, you have to create an application using the command " ng serve". Then open this project and then create a component using the command " ng g component loops". Go to the .ts file and take a variable array type. and then put the few values. Then go to the HTML file and make a list. Take a list item and then put the *ng-for loop. Then take put this variable name in the interpolation with the variable name like - {{student.name}}.

Now save all the files.


NgIf
=======
The ngIf directive removes or recreates a portion of the DOM tree based on an {expression}. If the expression assigned to ngIf evaluates to a false value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.

ngIf differs from ngShow and ngHide in that ngIf completely removes and recreates the element in the DOM rather than changing its visibility via the display css property. A common case when this difference is significant is when using css selectors that rely on an element's position within the DOM, such as the :first-child or :last-child pseudo-classes.

Note that when an element is removed using ngIf its scope is destroyed and a new scope is created when the element is restored. The scope created within ngIf inherits from its parent scope using prototypal inheritance. An important implication of this is if ngModel is used within ngIf to bind to a javascript primitive defined in the parent scope. In this case any modifications made to the variable within the child scope will override (hide) the value in the parent scope.

Also, ngIf recreates elements using their compiled state. An example of this behavior is if an element's class attribute is directly modified after it's compiled, using something like jQuery's .addClass() method, and the element is later removed. When ngIf recreates the element the added class will be lost because the original compiled state is used to regenerate the element.

Additionally, you can provide animations via the ngAnimate module to animate the enter and leave effects.

This directive creates new scope.
This directive executes at priority level 600.
This directive can be used as multiElement


